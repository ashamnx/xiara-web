{"version":3,"sources":["../source/Express/WebServer.ts"],"names":[],"mappings":"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","file":"WebServer.js","sourcesContent":["import * as express from \"express\";\r\nimport { Injectable } from \"@xiara/core\";\r\nimport { IControllerOptions, IControllerRouting } from \"../Controller\";\r\nimport { IRouter, IRouteDefinition } from \"../Router\";\r\nimport { IResponseOptions } from \"../Response\";\r\n\r\nconst routeFnMap = {\r\n    ANY: \"use\",\r\n    GET: \"get\",\r\n    POST: \"post\",\r\n    PUT: \"put\",\r\n    DELETE: \"delete\",\r\n    PATCH: \"patch\"\r\n};\r\n\r\n@Injectable()\r\nexport class WebServer\r\n{\r\n    App: any;\r\n    Controllers = [];\r\n\r\n    constructor()\r\n    {\r\n\t\tconsole.log(\"Creating express app\");\r\n        this.App = express();\r\n    }\r\n\r\n    use(middleware: any)\r\n    {\r\n        this.App.use(middleware);\r\n    }\r\n\r\n    useOnRoute(path:string, middleware: any)\r\n    {\r\n        this.App.use(path, middleware);\r\n    }\r\n\r\n    static(path: string)\r\n    {\r\n        this.App.use(express.static(path));\r\n    }\r\n\r\n    listen(target: number | string, address?: string)\r\n    {\r\n        this.App.listen(target, address);\r\n    }\r\n\r\n    useController(controller:any, options: IControllerOptions, controllerType: any)\r\n    {\r\n        this.Controllers[controllerType] = controller;\r\n        // if(options.router)\r\n        // {\r\n        //     let router = this.createRouter(options.router);\r\n        //     this.App.use(options.path, options.router);\r\n        // }\r\n        \r\n        if(options.path)\r\n        {\r\n            let router = express.Router();\r\n            this.bindControllerRoutes(router, (options.routes || []), controller);\r\n            let policies = options.policies || [];\r\n            for(let policy of policies)\r\n            {\r\n                let policyInstance = this.createPolicy(policy);\r\n                this.App.use(options.path, policyInstance.verify.bind(policyInstance));\r\n            }\r\n            this.App.use(options.path, router);\r\n        }\r\n    }\r\n\r\n    getControllerInstance(ControllerType)\r\n    {\r\n        return this.Controllers[ControllerType];\r\n    }\r\n    \r\n    bindControllerRoutes(router, routes:IControllerRouting[], controller: any, startPath = \"\")\r\n    {\r\n        for(let route of routes)\r\n        {\r\n            let policies = route.policies || [];\r\n            for(let policy of policies)\r\n            {\r\n                let policyInstance = this.createPolicy(policy);\r\n                this.addRoute(router, route.method, startPath + route.path, policyInstance.verify.bind(policyInstance));\r\n            }\r\n            this.addRoute(router, route.method, startPath + route.path, controller[route.target].bind(controller));\r\n            // Bind child routes\r\n            this.bindControllerRoutes(router, route.children || [], controller, startPath + route.path);\r\n        }\r\n    }\r\n\r\n    addRoutes(routes: IRouteDefinition[], startPath = \"\")\r\n    {\r\n        for(let route of routes)\r\n        {\r\n            let controller = this.getControllerInstance(route.controller);\r\n            let policies = route.policies || [];\r\n            for(let policy of policies)\r\n            {\r\n                let policyInstance = this.createPolicy(policy);\r\n                this.addRoute(this.App, route.method, startPath + route.path, policyInstance.verify.bind(policyInstance));\r\n            }\r\n            this.addRoute(this.App, route.method, startPath + route.path, controller[route.action].bind(controller));\r\n            this.addRoutes((route.children || []), startPath + route.path);\r\n        }\r\n        \r\n    }\r\n\r\n    addRoute(router, routeType:string, routePath: any, target)\r\n    {\r\n        let method = routeFnMap[routeType];\r\n        if(!method)\r\n            throw new Error(\"Invalid method '\" + routeType + \"' for route: '\" + routePath + \"'\");\r\n        router[method](routePath, target);\r\n    }\r\n\r\n    createPolicy(policy)\r\n    {\r\n        return new policy(this);\r\n    }\r\n\r\n    createRouter(routerType: any)\r\n    {\r\n        let router = express.Router();\r\n    }\r\n\r\n    bindResponse(response, options: IResponseOptions)\r\n    {\r\n        this.App.use((req, res, next) => {\r\n            res[options.name] = (...args:any[]) => {\r\n                response.send.apply(response, [req, res].concat(args));\r\n            }\r\n            next();\r\n        })\r\n    }\r\n};"]}