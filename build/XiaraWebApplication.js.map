{"version":3,"sources":["../source/XiaraWebApplication.ts"],"names":[],"mappings":"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","file":"XiaraWebApplication.js","sourcesContent":["import { XiaraApplication } from \"@xiara/core\";\r\nimport { WebModuleManager, IWebModuleOptions } from \"./WebModule\";\r\nimport { WebServer } from \"./Express\";\r\nimport { IControllerOptions } from \"./Controller\";\r\nimport { IResponseOptions } from \"./Response\";\r\nimport { IMiddleware, IMiddlewareOptions } from \"./Middleware\";\r\n//import { ControllerRegistry } from \"./Controller\";\r\n\r\nexport class XiaraWebApplication extends XiaraApplication\r\n{\r\n    private webserver = new WebServer();\r\n    Controllers: any[] = [];\r\n    Responses: any[] = [];\r\n    Middlewares: any[] = [];\r\n\r\n    constructor()\r\n    {\r\n        super();\r\n    }\r\n\r\n    protected createModuleManager()\r\n    {\r\n        this.moduleManager = new WebModuleManager(this);\r\n    }\r\n\r\n    protected initDependencies(AppModule)\r\n    {\r\n        super.initDependencies(AppModule);\r\n        this.initResponses(AppModule);\r\n        this.initMiddlewares(AppModule);\r\n        this.initControllers(AppModule);\r\n        this.initRoutes(AppModule);\r\n    }\r\n    \r\n    protected initRoutes(AppModule)\r\n    {\r\n        let options = this.moduleManager.getModuleOptions<IWebModuleOptions>(AppModule);\r\n        this.webserver.addRoutes((options.routes || []));\r\n    }\r\n\r\n    protected initMiddlewares(AppModule)\r\n    {\r\n        let options = this.moduleManager.getModuleOptions<IWebModuleOptions>(AppModule);\r\n\t\tthis.Middlewares = (options.middlewares || []).map( ControllerType => this.createMiddleware(ControllerType));\r\n    }\r\n\r\n    createMiddleware(MiddlewareType)\r\n    {\r\n        let middleware: IMiddleware = this.componentRegistry.create(MiddlewareType);\r\n        let options = this.componentRegistry.getOptions<IMiddlewareOptions>(MiddlewareType);\r\n        if(middleware.OnRegister)\r\n        {\r\n            middleware.OnRegister(this.webserver);\r\n        }\r\n        \r\n        if(!middleware.handler)\r\n            return;\r\n        if(options.path)\r\n        {\r\n            this.webserver.useOnRoute(options.path, middleware.handler.bind(middleware));\r\n        }else{\r\n            this.webserver.use(middleware.handler.bind(middleware));\r\n        }\r\n        \r\n        return middleware;\r\n    }\r\n\r\n    protected initControllers(AppModule)\r\n    {\r\n        let options = this.moduleManager.getModuleOptions<IWebModuleOptions>(AppModule);\r\n\t\tthis.Controllers = (options.controllers || []).map( ControllerType => this.createController(ControllerType));\r\n    }\r\n    \r\n    createController(ControllerType)\r\n    {\r\n        let controller = this.componentRegistry.create(ControllerType);\r\n        let options = this.componentRegistry.getOptions<IControllerOptions>(ControllerType);\r\n        this.webserver.useController(controller, options, ControllerType);\r\n        return controller;\r\n    }\r\n\r\n    \r\n    protected initResponses(AppModule)\r\n    {\r\n        let options = this.moduleManager.getModuleOptions<IWebModuleOptions>(AppModule);\r\n        this.Responses = (options.responses || []).map( ResponseType => this.createResponse(ResponseType));\r\n    }\r\n\r\n    createResponse(ResponseType)\r\n    {\r\n        let response = this.componentRegistry.create(ResponseType);\r\n        let options = this.componentRegistry.getOptions<IResponseOptions>(ResponseType);\r\n        this.webserver.bindResponse(response, options);\r\n        return response;\r\n    }\r\n\r\n    getWebServer()\r\n    {\r\n        \r\n        //this.webserver.registerMiddlewares();\r\n        // webserver.registerPolicies();\r\n        // webserver.registerRoutes();\r\n        // webserver.registerCacheControl();\r\n        // webserver.registerControllers();\r\n        // webserver.registerResponses();\r\n        return this.webserver;\r\n    }\r\n};"]}